-- This is the controller
class Controller

values
    pi = 3.14159265359;
    ctl_torque_max=10000;
    Kp = 1/100;
    Kd = 1/100;
    gravitational_acc = -9.81584;

    mass = 10;
    length = 1;
    
instance variables
    io : IO := new IO();
    math : MATH := new MATH();

    ctl_angle : real;
    ctl_angle_target : real;
    
    prev_error : real := 0; -- for PD regulator

    prev_time : real := 0; -- for PD regulator

    ctl_torque : real;

    target_is_set : bool;

    moving_state: <Moving> | <Stopped>;

    controller_state: <Init> | <Normal> | <Stop>;

operations
    public Controller : () ==> Controller
    Controller()==(
        ctl_angle := 0;
        ctl_angle_target := 0;
        ctl_torque := 0;

        moving_state := <Stopped>;

        controller_state := <Init>;
        
        target_is_set := true;
    );
    public SetTarget : real ==> ()
    SetTarget(target) == duration(1E6) (
        dcl str : seq of char := "Old target: ";
        target_is_set := false;
        str := str ^ VDMUtil`val2seq_of_char[real](ctl_angle_target);
        str := str ^ " New target: ";

        if not (controller_state = <Normal>) then (
            ctl_angle_target := target
        );

        str := str ^ VDMUtil`val2seq_of_char[real](ctl_angle_target);
        str := str ^ "\n";
        def - = io.echo(str) in skip;
        target_is_set := true;
    );

    public ReadAngle : () ==> ()
    ReadAngle() == duration(1E7) (
        dcl new_angle : real := ArmSystem`potentio.GetAngle();
        if(abs(new_angle - ctl_angle) > 0.5) then ( -- Stop if the current angle is too far from the target
            controller_state := <Stop>;

            def - = io.echo("Emergency stop!\n") in skip;
            );
        ctl_angle := new_angle;
    );

    public UpdateArmtorque : () ==> ()
    UpdateArmtorque() == duration(2E6) (
        dcl str : seq of char := "Old torque ctl: ";
        dcl gravity_comp : real := 0;
        str := str ^ VDMUtil`val2seq_of_char[real](ctl_torque);

        if(controller_state = <Stop>) then (
            ctl_torque := 0;
            ArmSystem`motor.SetTorque(ctl_torque);

            str := str ^ " New torque ctl: ";
            str := str ^ VDMUtil`val2seq_of_char[real](ctl_torque);
            str := str ^ "\n";
            def - = io.echo(str) in skip;

            return;
        );

        gravity_comp := mass * -gravitational_acc * length * math.cos(ctl_angle);
        -- find estimated torque
        if(moving_state = <Moving>) then
            ctl_torque := PDControl() + gravity_comp;
            --ctl_torque := (ctl_angle_target - ctl_angle)/100;

        if(ctl_angle_target - ctl_angle < 0.01 and ctl_angle_target - ctl_angle > -0.01) then
            moving_state := <Stopped>
        else
            moving_state := <Moving>;
        
        -- protect from going over max torque
        if ctl_torque > ctl_torque_max then
            ctl_torque := ctl_torque_max
        elseif ctl_torque < -ctl_torque_max then
            ctl_torque := -ctl_torque_max;

        if(moving_state = <Stopped>) then
            ctl_torque := gravity_comp;
    
        -- set the torque in the RobotArm
        ArmSystem`motor.SetTorque(ctl_torque);
        
        str := str ^ " New torque ctl: ";
        str := str ^ VDMUtil`val2seq_of_char[real](ctl_torque);
        str := str ^ "\n";
        def - = io.echo(str) in skip;
    );
    
    PDControl : () ==> real
    PDControl() == duration(0) (
        dcl e : real := ctl_angle_target - ctl_angle;
        dcl the_time : real := time / 1e6; -- convert to milliseconds
        dcl delta : real := the_time - prev_time;
        dcl de : real := (e - prev_error) / delta; 
        dcl torque : real := Kp * e + Kd * de;

        prev_error := e;
        prev_time := the_time;

        return torque;
    );

    public Init : () ==> ()
    Init() == duration(1E6) (
        def - = io.echo("Controller Init\n") in skip;
        while ctl_angle > 0.001 
        do (
            UpdateArmtorque();  
            ReadAngle();
            ArmSystem`roboarm.Step();
        );
    );

sync 
    per SetTarget=> (target_is_set = true);

end Controller


class RobotArm
values
    pi = 3.14159265359;
    mass = 10;
    length = 1;
    radius = 0.1;
    gravitational_acc = -9.81584 ;
    coulomb_friction=  0.1;
    viscous_friction= 0.05;
    
    env_angle_max= 1/2*pi;
    env_angle_min= 0;

    inertia = 1/4 * mass * radius**2 + 1/3 * mass * length**2;


instance variables
    io : IO := new IO();

    final_sim_time : real;
    final_sim_time_is_set : bool;

    last_time : real;

    env_angle: real;

    env_velocity: real;

    env_acceleration: real;

    torque_gravity: real;
    torque_friction: real;
    torque_motor: real;

operations
    public RobotArm: () ==> RobotArm
    RobotArm() == (
        env_angle := 0;
        env_velocity := 0;

        final_sim_time := 100;
        final_sim_time_is_set := true;

        last_time := 0;
        
        env_acceleration := 0;

        torque_gravity := 0;
        torque_friction := 0;
        torque_motor := 0;
    );

    public SetFinalSimTime : real ==> ()
    SetFinalSimTime (FinalSim) == duration(1E6) (
        final_sim_time_is_set := false;
        final_sim_time := FinalSim;
        final_sim_time_is_set := true;
    );

    
    public GetAngle:() ==> real
    GetAngle() == duration(1E6)(
        return env_angle
    );
    
    public SetMotorTorque: real ==> ()
    SetMotorTorque(torque) == duration(1E6) (
        dcl str : seq of char := "Old torque: ";
        str := str ^ VDMUtil`val2seq_of_char[real](torque_motor);
        str := str ^ " New torque: ";
        torque_motor := torque;
        str := str ^ VDMUtil`val2seq_of_char[real](torque_motor);
        str := str ^ "\n";
        def - = io.echo(str) in skip;
    );
    

    public Step : () ==> ()
    Step()== duration (0) (
        dcl str : seq of char := "Old angle: ";
        dcl str2 : seq of char := "Old velocity: ";
        dcl t: real := time / 1E6;
        dcl delta: real := (t - last_time);
        last_time := t;

        str2 := str2 ^ VDMUtil`val2seq_of_char[real](env_velocity);
        str2 := str2 ^ " New velocity: ";
        
        env_acceleration := torque_motor / inertia;

        env_velocity := env_acceleration * delta;
        
        -- if controller gives step too high we arrange so it ends at max instead of overshooting
        if env_angle + env_velocity * delta > env_angle_max then
            env_velocity:= (env_angle_max - env_angle) / delta 
        elseif env_angle + env_velocity * delta < 0 then
            env_velocity:= (0 - env_angle) / delta;



        str2 := str2 ^ VDMUtil`val2seq_of_char[real](env_velocity);
        str2 := str2 ^ "\n";

        str := str ^ VDMUtil`val2seq_of_char[real](env_angle);
        str := str ^ " New angle: ";

        env_angle := env_angle + env_velocity * delta;
        ArmSystem`potentio.Step();
        str := str ^ VDMUtil`val2seq_of_char[real](env_angle);
        str := str ^ "\n";
        def - = io.echo(str) in skip;
        def - = io.echo(str2) in skip;
    )
    pre env_angle >= 0 and env_angle <= env_angle_max
    post env_angle >= 0 and env_angle <= env_angle_max;

sync
    per SetFinalSimTime  => (final_sim_time_is_set = true);
    
end RobotArm

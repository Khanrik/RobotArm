class RobotArm
values
    pi = 3.14159265359;

instance variables
    env_angle_max : real; -- time
    public env_angle : real;
    public env_angle_target : real;
    env_velocity_max : real;
    public env_velocity : real;
    public env_velocity_target : real;
    
operations
    public RobotArm: () ==> RobotArm
    RobotArm() == (
        env_angle_max := 1/2 * pi; -- 90 degrees
        env_angle := 0;
        env_angle_target := 0;
        env_velocity_max := 1/16 * pi; -- 11.25 degrees per time unit
        env_velocity := 0;
        env_velocity_target := 0;
    );
    

    public Step : real ==> ()
    Step(delta)== duration (0) (
        -- find estimated velocity
        env_velocity := (env_angle_target - env_angle) / 100;

        -- if controller gives step too high we arrange so it ends at max instead of overshooting
        if env_angle + env_velocity * delta> env_angle_max then
            env_velocity:= (env_angle_max-env_angle)/delta 
        elseif env_angle + env_velocity * delta< 0 then
            env_velocity:= (0-env_angle)/delta ;
        
        -- protect from going over max velocity
        if env_velocity > env_velocity_max then
            env_velocity := env_velocity_max
        elseif env_velocity < -env_velocity_max then
            env_velocity := -env_velocity_max;
        
        env_angle := env_angle + env_velocity * delta;
    )
    pre env_angle_target >= 0 and env_angle_target <= env_angle_max
    post env_angle >= 0 and env_angle <= env_angle_max;

end RobotArm
